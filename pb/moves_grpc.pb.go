// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: pb/moves.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Connect4_CommunicateState_FullMethodName = "/connect4/CommunicateState"
	Connect4_NewGame_FullMethodName          = "/connect4/NewGame"
	Connect4_JoinGame_FullMethodName         = "/connect4/JoinGame"
	Connect4_LeaveGame_FullMethodName        = "/connect4/LeaveGame"
)

// Connect4Client is the client API for Connect4 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Connect4Client interface {
	CommunicateState(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Input, State], error)
	NewGame(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GameIDAndTeam, error)
	JoinGame(ctx context.Context, in *GameID, opts ...grpc.CallOption) (*GameIDAndTeam, error)
	LeaveGame(ctx context.Context, in *GameIDAndTeam, opts ...grpc.CallOption) (*Empty, error)
}

type connect4Client struct {
	cc grpc.ClientConnInterface
}

func NewConnect4Client(cc grpc.ClientConnInterface) Connect4Client {
	return &connect4Client{cc}
}

func (c *connect4Client) CommunicateState(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Input, State], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Connect4_ServiceDesc.Streams[0], Connect4_CommunicateState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Input, State]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Connect4_CommunicateStateClient = grpc.BidiStreamingClient[Input, State]

func (c *connect4Client) NewGame(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GameIDAndTeam, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameIDAndTeam)
	err := c.cc.Invoke(ctx, Connect4_NewGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connect4Client) JoinGame(ctx context.Context, in *GameID, opts ...grpc.CallOption) (*GameIDAndTeam, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameIDAndTeam)
	err := c.cc.Invoke(ctx, Connect4_JoinGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connect4Client) LeaveGame(ctx context.Context, in *GameIDAndTeam, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Connect4_LeaveGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Connect4Server is the server API for Connect4 service.
// All implementations must embed UnimplementedConnect4Server
// for forward compatibility.
type Connect4Server interface {
	CommunicateState(grpc.BidiStreamingServer[Input, State]) error
	NewGame(context.Context, *Empty) (*GameIDAndTeam, error)
	JoinGame(context.Context, *GameID) (*GameIDAndTeam, error)
	LeaveGame(context.Context, *GameIDAndTeam) (*Empty, error)
	mustEmbedUnimplementedConnect4Server()
}

// UnimplementedConnect4Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConnect4Server struct{}

func (UnimplementedConnect4Server) CommunicateState(grpc.BidiStreamingServer[Input, State]) error {
	return status.Errorf(codes.Unimplemented, "method CommunicateState not implemented")
}
func (UnimplementedConnect4Server) NewGame(context.Context, *Empty) (*GameIDAndTeam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewGame not implemented")
}
func (UnimplementedConnect4Server) JoinGame(context.Context, *GameID) (*GameIDAndTeam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (UnimplementedConnect4Server) LeaveGame(context.Context, *GameIDAndTeam) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGame not implemented")
}
func (UnimplementedConnect4Server) mustEmbedUnimplementedConnect4Server() {}
func (UnimplementedConnect4Server) testEmbeddedByValue()                  {}

// UnsafeConnect4Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Connect4Server will
// result in compilation errors.
type UnsafeConnect4Server interface {
	mustEmbedUnimplementedConnect4Server()
}

func RegisterConnect4Server(s grpc.ServiceRegistrar, srv Connect4Server) {
	// If the following call pancis, it indicates UnimplementedConnect4Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Connect4_ServiceDesc, srv)
}

func _Connect4_CommunicateState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Connect4Server).CommunicateState(&grpc.GenericServerStream[Input, State]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Connect4_CommunicateStateServer = grpc.BidiStreamingServer[Input, State]

func _Connect4_NewGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Connect4Server).NewGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Connect4_NewGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Connect4Server).NewGame(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect4_JoinGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Connect4Server).JoinGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Connect4_JoinGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Connect4Server).JoinGame(ctx, req.(*GameID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect4_LeaveGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameIDAndTeam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Connect4Server).LeaveGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Connect4_LeaveGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Connect4Server).LeaveGame(ctx, req.(*GameIDAndTeam))
	}
	return interceptor(ctx, in, info, handler)
}

// Connect4_ServiceDesc is the grpc.ServiceDesc for Connect4 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Connect4_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connect4",
	HandlerType: (*Connect4Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewGame",
			Handler:    _Connect4_NewGame_Handler,
		},
		{
			MethodName: "JoinGame",
			Handler:    _Connect4_JoinGame_Handler,
		},
		{
			MethodName: "LeaveGame",
			Handler:    _Connect4_LeaveGame_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommunicateState",
			Handler:       _Connect4_CommunicateState_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/moves.proto",
}
